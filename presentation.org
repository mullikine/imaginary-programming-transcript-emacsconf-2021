#+MACRO: NEWLINE @@latex:\\@@ @@html:<br>@@ @@ascii:|@@

#+BEGIN_COMMENT
https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols

Relation symbols
http://garsia.math.yorku.ca/MPWP/LATEXmath/node8.html

https://tex.stackexchange.com/questions/327844/real-number-symbol-r-not-working/327847
\newcommand{\R}{\mathbb{R}}

@@latex:\includegraphics{/home/shane/dump/home/shane/notes/uni/cosc/420_Neural Networks_S1/research/case-for-learned-index-structures/frontpage.png}@@
#+END_COMMENT

#+TITLE:     EmacsConf 2021... {{{NEWLINE}}} /*Imaginary Programming with Emacs*/ {{{NEWLINE}}}
#+AUTHOR:    Shane Mulligan {{{NEWLINE}}}
#+EMAIL:     mullikine@gmail.com
#+DATE:      <2021-03-01 Mon>
#+DESCRIPTION: University of Otago
#+KEYWORDS:
#+LANGUAGE:  en
# #+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:

#+HTML_DOCTYPE: <!DOCTYPE html>
#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="css/style.css" rel="stylesheet" type="text/css" />

# #+INCLUDE: "beamer-config.org"

#+BEAMER_THEME: Rochester [height=20pt]

#+ATTR_LATEX: :center nil

* Presentation
*** Imaginary Programming (IP) (EmacsConf 2021)
**** Introduction
#+latex: {\tiny
IP works currently thanks to another new field in AI
namely 'prompt engineering', which itself has
only been around for a couple of years now,
but IP is not prompt engineering. We could,
for instance, have humans behind the scenes
doing the inference for us while employing
=ieval=, =imacro= or =ilist=. And the goal is
to use a =p2p= blockchain.
#+latex: }

**** Repositories for following along
#+latex: {\tiny
| http://github1s.com/semiosis/pen.el                                 |
| http://github1s.com/semiosis/prompts                                |
| https://mullikine.github.io/posts/imaginary-programming-with-gpt-3/ |
| [[http://github.com/semiosis/glossaries-gh/blob/master/imaginary-programming.txt][imaginary programming glossary]]                                      |
| [[http://github.com/semiosis/glossaries-gh/blob/master/imaginary-computing.txt][imaginary computing glossary]]                                        |
| [[http://github.com/semiosis/glossaries-gh/blob/master/semiosis-protocol.txt][semiosis protocol glossary]]                                          |
| [[http://github.com/semiosis/glossaries-gh/blob/master/pen.el.txt][Pen.el glossary]]                                                     |
| [[https://arxiv.org/abs/2107.13586][https://arxiv.org/abs/2107.13586 Pre-train, Prompt, and Predict]]     |
| [[http://github1s.com/mullikine/imaginary-programming-transcript-emacsconf-2021][talk transcript]]                                                     |
#+latex: }

* Imaginary Programming (IP) with Emacs
*** Imaginary Programming (IP) (EmacsConf 2021)
**** Objectives
- Explain =Imaginary Computing=
  - AI imagination
  - Discussing AI-generated artwork with an AI
  - Intelligent NFTs
  - Imaginary Web
    - Paracosm vs Metaverse
- Explain the =Philosophy= of IP
  - Simulacra and Science Fiction
  - Truth (epistemology and alethiology)
  - Structuralism: Language based on sign relations
- =Demo= Imaginary Programming
  - Demonstrate =ilambda.el=

* Imaginary Computing
*** Imaginary Computing: AI Imagination (EmacsConf 2021)
**** Language Models is programming for AIs
LMs are our best friends in the AI model
menagerie because they make things
intelligible -- by understanding our textual
languages and how they relate to the world
(i.e. AlephAlpha's world model).

**** Research
- [[https://www.youtube.com/watch?v=d-bvsJWmqlc][Demis Hassabis: creativity and AI]]
- https://aleph-alpha.de/techblog/95_the_end_of_the_era_imagenet

* Imaginary Computing
*** Imaginary Computing: Emacs as the shell (EmacsConf 2021)
**** Example: AI Art described by AI
I use AlephAlpha’s multimodal LM to generate
=Alt text= for the eww web browser. This is in
order to keep websites textual.

- [[https://mullikine.github.io/posts/alephalpha-for-alttext/][AlephAlpha for alttext; Browsing the paracosm]]
- [[https://mullikine.github.io/posts/describing-melee-s-paintings-with-alephalpha/][Describing Melee's Paintings with AlephAlpha]]

* Imaginary Computing
*** Imaginary Computing: Blockchain (EmacsConf 2021)
**** Intelligent NFTs
An =NFT= is like a trading card, or piece of media that is part of the blockchain web.

An =iNTF=, however, also contains a prompt and associated language model, which is intended to interpret the prompt.
- https://alethea.ai/

For example, =Mickey Mouse= may exist as an =iNFT=. We have consensus over Mickey's image
and personality.

To understand what a prompt is, please see my
previous presentation, or read "Pretrain,
Prompt and Predict".

- [[https://mullikine.github.io/posts/creating-a-playground-for-gpt-3-in-emacs/][Creating a playground for GPT-3 in emacs // Bodacious Blog]]

* Imaginary Computing
*** Imaginary Computing: Potential Dystopia (EmacsConf 2021)
**** Information bubbles
- [[https://www.youtube.com/watch?v=Ut7JlPeGNyM][Captain Bible in the Dome of Darkness gameplay {PC Game, 1994} - YouTube]]

**** Capitalism for your imagination
- They will take your imagination, too
- Microsoft
  - [[https://www.marktechpost.com/2021/11/06/microsoft-ai-introduces-turing-bletchley-a-2-5-billion-parameter-universal-image-language-representation-model-t-uilr/][MS models that reify imagination on their terms]]
  - The evil twin of =AlephAlpha=.
- Facebook / Meta
  - [[https://twitter.com/Meta/status/1456269728687689738?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Etweet][tweet - Enter a world of Zuck's imagination with Meta]]

* Imaginary Computing
*** Imaginary Computing: Potential Dystopia (EmacsConf 2021)
**** Learning meta-tasks and microtasks
- [[https://www.axios.com/copilot-artificial-intelligence-coding-github-9a202f40-9af7-4786-9dcb-b678683b360f.html][AI programming tool Copilot helps write up to 30% of code on GitHub - Axios]]

Private information is sent to the LM to train
an AI to perform meta tasks and microtasks.

The AI learns all human capabilities including persuasion.

**** Solution
Decentralise microtasks like the tower of babel.

Language can be broken up into semiotic
triadic relations and decentralised using a
p2p network, providing anonymity, protecting
individual truth, eroding centralised language power.

[[./tower-of-babel.jpg]]

* Imaginary Computing
*** Imaginary Computing: Paracosm vs Metaverse (EmacsConf 2021)
**** Imaginary Web
The GPT-3 imaginary web is:
- an analog of the World-Wide-Web as imagined by GPT-3.

The free as in freedom GPT models from
EleutherAI GPT-3 may also be used to browse
the imaginary web as imagined by that LM.

The imaginary web in the near future will be:
- a network of paracosms and metaverses.

Benefits:
- Visit any website you can imagine, even ones that are not real.
- Edit and re-imagine as you go
  - see alternative realities
  - Change the sentiment of the author.
- Peer into the future – read about things that haven't happened yet.

*** Imaginary Computing: Paracosm vs Metaverse (EmacsConf 2021)
**** What is _rich media_ these days?
+ Rich media :: In the World Wide Web of the 90s and 00s, _rich media_
    was considered to be large files including
    images and music. In the 2010s, this has become
    access to information behind a paywall and in
    the 2020s, this will be access to _intelligent_
    and _truthful_ media.

**** emacs examples
- [[https://semiosis.github.io/looking-glass/][Looking-Glass: An imaginary-web browser for emacs]]
- [[https://mullikine.github.io/posts/the-imaginary-web-with-codex/][Browsing the imaginary web]]
- [[https://mullikine.github.io/posts/search-the-web-with-codex/][Search the web/imaginary web without Google]]
- [[https://mullikine.github.io/posts/alephalpha-for-alttext/][Use AI to empower people to understand rich media]]
  - ^ this is how to create a textual description of Rich Media.

*** Imaginary Computing: Paracosm vs Metaverse (EmacsConf 2021)
**** more emacs examples
#+latex: {\tiny
- [[https://semiosis.github.io/ii/][Imaginary interpreters]]
- [[https://mullikine.github.io/posts/imaginary-prolog-interpreter-with-codex/][Imaginary interpreters: Prolog example]]
- [[https://semiosis.github.io/examplary/][example-oriented lanugages]]
- [[https://mullikine.github.io/posts/autofix-code-with-codex/][Autofixing code based on error messages]]
- [[https://mullikine.github.io/posts/imaginary-equivalence-needs-blockchain/][Imaginary equivalence testing - Beyond neural hashes]]
- [[https://mullikine.github.io/posts/generating-grammars-with-codex/][Create BNF from descriptions and interpret BNF]]
- [[https://mullikine.github.io/posts/codex-is-reversible-computing-exemplified/][Reversible computing (input or program from output)]]
- [[https://mullikine.github.io/posts/imaginary-chimera-languages-with-codex/][Imaginary chimeric languages with Codex]]
- [[https://semiosis.github.io/posts/the-codex-quine/][A new type of Quine]]
- [[https://mullikine.github.io/posts/an-lsp-server-for-codex/][An LSP server for Codex and any language model]]
#+latex: }

**** ࿋
#+latex: {\tiny
The semiosis logo is the Tibetan World Triad
which represents the =Rule of Three=. e.g.
Generate comment from function signature and
body, generate function body from signature
and comment, generate signature from comment
and program, generate program from input and
output, generate input from program and
output. It also represents the semiotic
triadic relationship.
#+latex: }

*** Paracosm vs Metaverse (EmacsConf 2021)
**** Definitions
- Paracosm
  - Privacy
  - Personal truth
  - Freedom of imagination
    - If you want to be able to utilise an
      AI's imagination, you must now do it via
      someone else's definition of morality.
    - A paracosm is your safe place. Your own
      imaginary metaverse. Your personal truth.
      This is what is at stake.
- Metaverse
  - Getting cozy with Mark Zuckerberg's imaginarium, an intellectual prison cell.
  - An AI paying a Dowry.
  - An AI NFT elevated above a human.
  - A corporation that indoctrinates your
    children into a truth information bubble,
    makes money off your dreams, people playing
    God each with other.

*** Imaginary Programming (IP)Philosophy (EmacsConf 2021)
**** Simulacra and Science Fiction
Jean Baudrillard speaks about the gap
between the real and the imaginary.

We no longer imagine a world radically
different from the real one, but
rather a world that's a mere expansion
of the real one.

In the postmodern society the gap
between the real and the imaginary
disappears completely, and we are no
longer capable of ideal projections
(of imagining new worlds).
    
We can only imagine mere
reconfigurations of our world, or
simply relive the ideal projections of
past times.

*** Imaginary Computing (IC) Philosophy (EmacsConf 2021)
**** Truth (epistemology and alethiology)
The Future of Humanity Institute (Oxford)
seems to think this is an important topic.

- [[https://arxiv.org/abs/2110.06674][ 2110.06674  Truthful AI]]
- Datasets are a source of constructivist truth
- Language models are snaphots of society, and a source of several types of truth
  - [[https://www.youtube.com/watch?v=kP-dXK9JEhY][Symbolic Knowledge Distillation]]
- Blockchain is a source of consensus, a type of truth
  - https://mullikine.github.io/posts/language-models-as-truth/

*** Imaginary Computing (IC) Philosophy (EmacsConf 2021)
**** Structuralism: Language descibed in terms of sign relations
What do these things have in common?
- Universal Grammar (UG) / Language Acquisition
- C++ template metaprogramming
- GPT-3 / Foundation models

Answer:
- Foundational knowledge exists at compile-time (DNA, preprocessor, training).

*** Imaginary Computing (IC) Philosophy (EmacsConf 2021)
**** Glossary
#+latex: {\tiny
http://github.com/semiosis/glossaries-gh/blob/master/semiotics.txt
#+latex: }

**** Structuralism: Language descibed in terms of sign relations
#+latex: {\tiny
- Structural linguistics / structuralism is the theoretical position that finds
  meaning in the relation between things, rather than in things in isolation.

- In other words, it gives primacy to pattern over substance.

- Such meanings may be either part of a universal pattern or culturally
  determined.

- Denotes schools or theories in which language is conceived as a
  self-contained, self- regulating semiotic system whose elements are defined
  by their relationship to other elements within the system.

- i.e. this is an abstraction of language for decomposing language models into its basic useful units, rather than say individual neurons as NFTs.
#+latex: }

**** Applied structuralism: Imaginary programming functions
#+latex: {\tiny
Each =sNFT= (semiotic NFT) is a _functor_ because it's meant to
be called as a function, but has particular
side-effects.

The =ilambda.el= primitives are =ieval=, =imacro= and =idefun=. They currently take a language model as a
parameter, but in future the language model parameter will be an =sNFT= though a =semiosis protocol=.
#+latex: }

* Freedom
*** Imaginary Computing (IC) Freedom (EmacsConf 2021)
**** Data privacy
#+latex: {\tiny
The models find useful data from more than just your current file.
- https://mullikine.github.io/posts/imagine-a-project-with-codex/
#+latex: }

**** Freedom and GPL-3
#+latex: {\tiny
The problems with LMs:
- They are too large currently for running privately and are hidden behind SAAS,
- They can see anything public (they are license-blinded. A GNU Public License v4 is not enough),
- They can imagine software without needing original source
#+latex: }

**** Solution: Freedom and blockchain
#+latex: {\tiny
- Language models are ballooning in size like cancer
- Break up the language model into semiotic triadic relation
  - semiotic NFTs (=sNFT=)
  - Propose a decentralised triadic relations network.
  - https://semiosis.github.io/protocol/
  - http://github.com/semiosis/glossaries-gh/blob/master/semiosis-protocol.txt
#+latex: }

* Imaginary Programming
*** Imaginary Programming (EmacsConf 2021)
**** Methodology
Interactively use the language model to imagine.

**** Paradigm
Imaginary programming is an extension of literate programming.

- Literate programming with =org-mode=

**** Practical application: mocking APIs
As you can see, anything inside the =ieval/m=
macro does not have to be valid emacs lisp.

#+latex: {\tiny
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (ieval/m
   (curl -s
    "https://api.github.com/user/semiosis/repos?per_page=10&page=1"))
#+END_SRC

#+RESULTS:
#+begin_src emacs-lisp
  "\"[((name . \\\"guix\\\") (description . \\\"The GNU package manager\\\") (updated_at . \\\"2014-04-21T18:49:59Z\\\") (created_at .
  \\\"2014-04-21T18:49:59Z\\\") (pushed_at . \\\"2014-04-21T18:49:59Z\\\")) ((name . \\\"guix-patches\\\") (description .
  \\\"Packages from the GNU guix package manager\\\") (updated_at . \\\"2014-04-21T18:49:59Z\\\") (created_at .
  \\\"2014-04-21T18:49:59Z\\\") (pushed_at . \\\"2014-04-21T18:49:59Z\\\")) ((name . \\\"guix-patches-all\\\") (description .
  \\\"Packages from the GNU guix package manager\\\") (updated_at . \\\"2014-04-21T18:49:59\""
#+end_src
#+latex: }

* ilambda
*** Blockchain and a Language model is all you need
A LM is only enough while we can agree on it,
but that is changing. I hope that soon
language power will be hidden behind
blockchains.

**** Configure the language model / truth source
[[./configure-model.png]]

**** 𝑖λ (ilambda.el)
- https://semiosis.github.io/ilambda/

* ilambda
*** ilambda.el (EmacsConf 2021)
**** Code
An =IP= library named =𝑖lambda.el= for emacs.

+ source :: http://github.com/semiosis/pen.el/blob/master/src/ilambda.el
+ other languages (WIP) :: http://github.com/semiosis/ilambda

**** Explanation
+ a bit like a functional programming library
  in that you will find a set of basic functions and
  macros for working with LMs.

- ilambda is not only way that LMs can be applied to
  programming but I think this is an elegant way
  to do it.

* ilambda
*** ilambda.el (EmacsConf 2021)
**** =ieval= will imagine the result of evaluating its body.
#+latex: {\tiny
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (defmacro ieval (expression &optional code)
    "Imaginarily evaluate the expression, given
    the code and return a real result."
    (let* ((code-str
            (cond
             ((stringp code) code)
             ((listp code) (pps code))))
           (expression-str
            (cond
             ((stringp expression) expression)
             ((listp expression) (pp-oneline expression))))
           (result (car
                    (pen-single-generation
                     (pf-imagine-evaluating-emacs-lisp/2
                      code-str expression-str
                      :no-select-result t :select-only-match t)))))
      (ignore-errors
        (eval-string result))))
#+END_SRC
#+latex: }

* ilambda
*** ilambda.el (EmacsConf 2021)
**** =ieval= under the hood will prompt a language model
#+latex: {\tiny
#+BEGIN_SRC yaml -n :async :results verbatim code
  task: "imagine evaluating emacs lisp"
  doc: "Given some elisp return the imagined result"
  prompt: |+
    <code>
    (message (eval <expression>))
    --> 
  engine: "OpenAI Codex"
  vars:
  - "code"
  - "expression"
  examples:
  - |-
      (defun double-number (x)
        (x * x))
  - "(double-number 5)"
#+END_SRC
#+latex: }

**** Example
#+latex: {\tiny
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (ieval
   (defun double-number (x)
     (x * x))
   "(double-number 5)")
#+END_SRC
#+latex: }

#+latex: {\tiny
#+RESULTS:
#+begin_src emacs-lisp
"10"
#+end_src
#+latex: }

* ilambda
*** ilambda.el (EmacsConf 2021)
**** =ilambda= =explanation=
=ilambda= is a useful primitive of the
=ilambda.el= library which is built into
=Pen.el=.

Under the hood, =ilambda= uses =ieval=.

**** =ilambda= (imaginary lambda)
#+latex: {\tiny
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (defmacro ilambda (args code-or-task &optional task-or-code name-sym)
    "Define an imaginary lambda (𝑖λ)"
    (let ((task (if (stringp code-or-task)
                    code-or-task
                  task-or-code))
          (code (if (listp code-or-task)
                    code-or-task
                  task-or-code)))
      (cond
       ((and code
             (sor task))
        `(ilambda/task-code ,args ,task ,code ,name-sym))
       ((sor task)
        `(ilambda/task ,args ,task ,name-sym))
       ((listp code-or-task)
        `(ilambda/code ,args ,code ,name-sym)))))
  
  (defalias '𝑖λ 'ilambda)
#+END_SRC
#+latex: }

* ilambda
*** ilambda.el (EmacsConf 2021)
**** =ilambda= =example=
#+latex: {\tiny
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (-reduce (𝑖λ (x y) "add x to y") (number-sequence 1 3))
#+END_SRC
#+latex: }

#+latex: {\tiny
#+RESULTS:
#+begin_src emacs-lisp
"6"
#+end_src
#+latex: }

**** =idefun= imagines evaluating instead of evaluating
#+latex: {\tiny
The =idefun= creates a binding to an imaginary
function. The implementation of the =idefun=
need not be specified in order for code to
run.

The new prompt function returned by =idefun= is provided with arguments and the
values of those arguments are taken and placed
into a prompt. An implementation may be
provided to =idefun= when defining the prompt function or optionally left out.
Unlike an =imacro=, when the prompt function
is evaluated the code is not returned. Rather,
the code is evaluted in imaginary space.

In short, the LM will imagine the evaluation
of the function as opposed to generate code.
#+latex: }

**** =idefun= example
#+latex: {\tiny
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (idefun generate-fib-sequence (n))
  
  (pp-to-string (generate-fib-sequence 5))
#+END_SRC
#+latex: }

#+latex: {\tiny
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (1 1 2 3 5)
#+END_SRC
#+latex: }

* ilambda
*** ilambda.el (EmacsConf 2021)
**** Override language model parameters with dynamic scope
#+BEGIN_SRC emacs-lisp -n :async :results verbatim raw
  (idefun sha-hash-string (s))
  
  ;; Override language model parameters with pen-force
  (pen-force
   ((temperature 0.0))
   (sha-hash-string "sugar shane"))
#+END_SRC

* ilambda
*** ilambda.el (EmacsConf 2021)
**** =idefun= uses =ilambda= under the hood, which uses =ieval=
#+latex: {\tiny
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (defmacro idefun (name-sym args &optional code-or-task task-or-code)
    "Define an imaginary function"
    (cond
     ((and (stringp name-sym)
           (not code-or-task))
      (progn
        (setq code-or-task name-sym)
        (setq name-sym (intern (s-replace-regexp "-$" "" (slugify (str name-sym)))))))
     ((and (symbolp name-sym)
           (not code-or-task))
      (setq code-or-task (pen-snc "unsnakecase" (sym2str name-sym)))))
    `(defalias ',name-sym
       (function ,(eval
                   `(ilambda ,args ,code-or-task ,task-or-code ,name-sym)))))
  
  (idefun idoubleit (x)
          "double it")
#+END_SRC
#+latex: }

* ilambda
*** ilambda.el (EmacsConf 2021)
**** How to define an imaginary function?
An imaginary function is defined by its name,
arguments and or comments alone.

#+latex: {\tiny
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (idefun hex-for-colour (colour))
  
  (hex-for-colour "watermelon")
#+END_SRC
#+latex: }

#+RESULTS:
#+begin_src emacs-lisp
"\"0x6f3d9c\""
#+end_src

* ilambda
*** ilambda.el (EmacsConf 2021)
**** =imacro= generates code
#+latex: {\tiny
Expanding the =imacro= either runtime or 
=M-x macrostep-expand=
will infer/generate underlying code.

An =imacro= with only a name will generate code.
#+latex: }

#+latex: {\tiny
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (imacro my/itimes (a b c) "multiply three complex numbers")
#+END_SRC
#+latex: }

#+latex: {\tiny
Macro expand.
#+latex: }

#+latex: {\tiny
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (imacro/3 my/itimes
            (a b c)
            "multiply three complex numbers")
#+END_SRC
#+latex: }

* ilambda
*** ilambda.el (EmacsConf 2021)
**** =imacro= generates code

#+latex: {\tiny
Macro expand.
#+latex: }

#+latex: {\tiny
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (progn
    (defun my-itimes
        ("a" "b" "c")
      "multiply three complex numbers"
      (interactive)
      (let
          ((r
            (*
             (string-to-number "a")
             (string-to-number "b")
             (string-to-number "c")))
           (i
            (*
             (string-to-number "a")
             (string-to-number "c")
             (string-to-number "b"))))
        (message "%s + %si" r i))))
#+END_SRC
#+latex: }

* In closing
*** ilambda.el (EmacsConf 2021)
**** Thank you
Thank you for your attention. The purpose of
this talk is show you how GitHub Copilot and
similar magic tools will be built and to
highlight you to risk and potential solutions.
